{"version":3,"sources":["logo.svg","i18n/translations/index.js","i18n/index.js","i18n/reducer.js","i18n/Context.jsx","components/LanguageSelector/index.jsx","components/App/index.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","translations","en","es","pt","tr","languages","Object","keys","transtations","defaultLang","window","localStorage","getItem","i18n","lang","key","reducer","state","action","type","setItem","payload","t","initialState","I18nContext","createContext","LanguageSelector","_useContext","useContext","dispatch","react_default","a","createElement","defaultValue","onChange","_ref","value","currentTarget","map","code","App","className","src","logo","alt","components_LanguageSelector","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","children","_useReducer","useReducer","_useReducer2","slicedToArray","Provider","objectSpread","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ooBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCKzBC,EAAA,CACbC,QACAC,QACAC,QACAC,SCPWC,EAAYC,OAAOC,KAAKC,GAExBC,EAAcC,OAAOC,aAAaC,QADpB,qBAC4C,KAExDC,EAAA,SAAAC,GAAI,OAAI,SAAAC,GAAG,OAAIP,EAAaM,GAAMC,IAAQA,ICF1CC,EAAA,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACd,IAJ6B,kBAO5B,OAFGT,OAAOC,aAAaS,QDJC,mBCIoBF,EAAOG,SAE5C,CACNP,KAAMI,EAAOG,QACbC,EAAGT,EAAKK,EAAOG,UAGjB,QACC,OAAOJ,ICVJM,EAAe,CACpBT,KAAML,EACNa,EAAGT,EAAKJ,IAGIe,EAAcC,wBAAcF,2BCqB1BG,EAzBU,WAAM,IAAAC,EACFC,qBAAWJ,GAA9BV,EADqBa,EACrBb,KAAMe,EADeF,EACfE,SAiBd,OACEC,EAAAC,EAAAC,cAAA,UAAQC,aAAcnB,EAAMoB,SAhBN,SAAAC,GAAkC,IAAdC,EAAcD,EAA/BE,cAAiBD,MAC1CP,EAAS,CACPV,KFTyB,kBEUzBE,QAASe,MAKJ/B,EAAUiC,IAAI,SAAAC,GAAI,OACvBT,EAAAC,EAAAC,cAAA,UAAQjB,IAAKwB,EAAMH,MAAOG,GACvBA,OCYMC,MAxBf,WAAe,IACLlB,EAAMM,qBAAWJ,GAAjBF,EAER,OACEQ,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAChBX,EAAAC,EAAAC,cAAA,OAAKU,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,SACGV,EAAE,oBAELQ,EAAAC,EAAAC,cAAA,KACES,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEH1B,EAAE,qBCZO2B,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPxB,EAAAC,EAAAC,cJG0B,SAAAG,GAAkB,IAAfoB,EAAepB,EAAfoB,SAAeC,EAClBC,qBAAWzC,EAASO,GADFmC,EAAApD,OAAAqD,EAAA,EAAArD,CAAAkD,EAAA,GACrCvC,EADqCyC,EAAA,GAC9B7B,EAD8B6B,EAAA,GAG7C,OACC5B,EAAAC,EAAAC,cAACR,EAAYoC,SAAb,CAAsBxB,MAAK9B,OAAAuD,EAAA,EAAAvD,CAAA,GAAOW,EAAP,CAAcY,cACvC0B,IIRF,KACEzB,EAAAC,EAAAC,cAAC8B,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.96e91d34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import en from './en'\nimport es from './es'\nimport pt from './pt'\nimport tr from './tr'\n\nexport default {\n  en,\n  es,\n  pt,\n  tr,\n}\n","import transtations from './translations'\n\nexport const languages = Object.keys(transtations)\nexport const STORAGE_KEY = 'current_language'\nexport const defaultLang = window.localStorage.getItem(STORAGE_KEY) || 'en'\n\nexport default lang => key => transtations[lang][key] || key\n","import i18n, { STORAGE_KEY } from '.'\n\nexport const CHANGE_LANGUAGE = 'change/language'\n\nexport default (state, action) => {\n\tswitch (action.type) {\n\t\tcase CHANGE_LANGUAGE:\n      window.localStorage.setItem(STORAGE_KEY, action.payload)\n\n\t\t\treturn {\n\t\t\t\tlang: action.payload,\n\t\t\t\tt: i18n(action.payload),\n\t\t\t}\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n","import React, { createContext, useReducer } from 'react'\n\nimport i18n, { defaultLang } from '.'\nimport reducer from './reducer'\n\nconst initialState = {\n\tlang: defaultLang,\n\tt: i18n(defaultLang),\n}\n\nexport const I18nContext = createContext(initialState)\n\nexport const I18nProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n\treturn (\n\t\t<I18nContext.Provider value={{ ...state, dispatch }}>\n\t\t\t{children}\n\t\t</I18nContext.Provider>\n\t)\n}\n","import React, { useContext } from 'react'\n\nimport { I18nContext } from '../../i18n/Context'\nimport { CHANGE_LANGUAGE } from '../../i18n/reducer'\nimport { languages } from '../../i18n'\n\nconst LanguageSelector = () => {\n  const { lang, dispatch } = useContext(I18nContext)\n\n  const handlerLanguage = ({ currentTarget: { value } }) => {\n    dispatch({\n      type: CHANGE_LANGUAGE,\n      payload: value,\n    })\n  }\n\n  const renderOptions = () => {\n    return languages.map(code => (\n      <option key={code} value={code}>\n        {code}\n      </option>\n    ))\n  }\n\n  return (\n    <select defaultValue={lang} onChange={handlerLanguage}>\n      {renderOptions()}\n    </select>\n  )\n}\n\nexport default LanguageSelector\n","import React, { useContext } from 'react'\n\nimport './style.css'\nimport logo from '../../logo.svg'\nimport { I18nContext } from '../../i18n/Context'\nimport LanguageSelector from '../LanguageSelector'\n\nfunction App() {\n  const { t } = useContext(I18nContext)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <LanguageSelector />\n        <p>\n          {t('App.description')}\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {t('App.linkTitle')}\n        </a>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport { I18nProvider } from './i18n/Context'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <I18nProvider>\n    <App />\n  </I18nProvider>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}